{"version":3,"file":"index.js","sources":["src/actions.js","src/types/keyValue/keyValue.middleware.js","src/selectors.js","src/types/simpleObject/simpleObject.middleware.js","src/types/simpleObject/simpleObject.selectors.js","src/index.js","src/reducer.js"],"sourcesContent":["const scope = action => `@@krf/${action.toUpperCase()}`\n\nconst getPrefix = prefix => name => `${prefix ? '>' : ''}${prefix}>${name}`\n\nexport const SET = prefix => name => scope(`SET${getPrefix(prefix)(name)}`)\nexport const set = prefix => name => payload => ({ type: SET(prefix)(name), payload })\n\nexport const RESET = prefix => name => scope(`RESET${getPrefix(prefix)(name)}`)\nexport const reset = prefix => name => () => ({ type: RESET(prefix)(name) })\n\nexport const ADD = prefix => name => scope(`ADD${getPrefix(prefix)(name)}`)\nexport const add = prefix => name => payload => ({ type: ADD(prefix)(name), payload })\n\nexport const UPDATE = prefix => name => scope(`UPDATE${getPrefix(prefix)(name)}`)\nexport const update = prefix => name => payload => ({ type: UPDATE(prefix)(name), payload })\n\nexport const REMOVE = prefix => name => scope(`REMOVE${getPrefix(prefix)(name)}`)\nexport const remove = prefix => name => key => ({ type: REMOVE(prefix)(name), payload: key })\n\nexport const ADD_OR_UPDATE = prefix => name => scope(`ADD_OR_UPDATE${getPrefix(prefix)(name)}`)\nexport const addOrUpdate = prefix => name => payload => ({ type: ADD_OR_UPDATE(prefix)(name), payload })\n","import { omit } from 'lodash'\nimport { SET, ADD, UPDATE, REMOVE, RESET, ADD_OR_UPDATE } from './keyValue.actions'\n\nexport const initState = {\n  data: {},\n  keys: [],\n  array: [],\n  initialized: false,\n}\n\nconst getAsArray = entry => (Array.isArray(entry) ? entry : [entry])\n\nconst toObject = (key, entry) => {\n  const object = {}\n  getAsArray(entry).forEach((entity) => { object[entity[key]] = entity })\n\n  return object\n}\n\nconst keyAlreadyExists = state => key => (state.data[key] !== undefined)\n\nconst mapDataToState = state => data => ({\n  ...state,\n  data,\n  keys: Object.keys(data),\n  array: Object.values(data),\n  initialized: true,\n})\n\nconst set = (key, state, payload) => mapDataToState(state)(toObject(key, payload))\n\nconst add = (key, state, payload) => {\n  const instanceKey = payload[key]\n\n  return mapDataToState(state)({ ...state.data, [instanceKey]: payload })\n}\n\nconst addOrUpdate = (key, state, payload) => {\n  const instanceKey = payload[key]\n\n  return mapDataToState(state)({ ...state.data, [instanceKey]: { ...state.data[instanceKey], ...payload } })\n}\n\nconst remove = (key, state, payload) => mapDataToState(state)(omit(state.data, [].concat(payload)))\n\nconst defaultState = (key, defaultData) => (defaultData !== undefined ? set(key, {}, defaultData) : initState)\n\nconst reducer = key => prefix => name => defaultData =>\n  (state = defaultState(key, defaultData), { type, payload } = {}) => {\n    switch (type) {\n      // simple\n      case SET(prefix)(name): return set(key, state, payload)\n      case ADD(prefix)(name): return add(key, state, payload)\n      case ADD_OR_UPDATE(prefix)(name): return addOrUpdate(key, state, payload)\n      case REMOVE(prefix)(name): return remove(key, state, payload)\n      case RESET(prefix)(name): return defaultState(key, defaultData)\n\n      // with key existance test\n      case UPDATE(prefix)(name): return keyAlreadyExists(state)(payload[key]) ? addOrUpdate(key, state, payload) : state\n\n      // default\n      default: return state\n    }\n  }\n\nexport default key => prefix => name => defaultData => (ctx = {}) => ({\n  ...ctx,\n  state: reducer(key)(prefix)(name)(defaultData)(ctx.state, ctx.action),\n})\n","import { at } from 'lodash'\n\nexport const getState = options => (state) => {\n  let subState = state\n  const { name, path } = options\n\n  if (path !== undefined && path.length > 0) [subState] = at(state, path)\n\n  return subState[name]\n}\n\nconst getFactory = key => options => state => getState(options)(state)[key]\nexport const getKeys = getFactory('keys')\nexport const getAsArray = getFactory('array')\nexport const getLength = options => state => getKeys(options)(state).length\nexport const isInitialized = getFactory('initialized')\n\nconst getData = options => getFactory('data')(options)\nexport const get = options => keys => (state) => {\n  const data = getData(options)(state)\n  // All data\n  if (keys === undefined || keys === null) return data\n  // By keys\n  if (Array.isArray(keys)) return keys.map(k => data[k])\n  // By key\n  return data[keys]\n}\n\nexport const getBy = options => (propertyPath, values) => (state) => {\n  const data = getAsArray(options)(state)\n  if (Array.isArray(values)) return data.filter(d => values.includes(at(d, propertyPath)[0]))\n  return data.filter(d => values === at(d, propertyPath)[0])\n}\n\nexport const hasKey = options => key => (state) => {\n  const keys = getKeys(options)(state)\n\n  return keys.includes(key)\n}\n","import { SET, RESET, UPDATE } from './simpleObject.actions'\n\nexport const initState = {}\nconst defaultState = defaultData => (defaultData !== undefined ? defaultData : initState)\n\nconst reducer = (/* key */) => prefix => name => defaultData =>\n  (state = defaultState(defaultData), { type, payload } = {}) => {\n    switch (type) {\n      case SET(prefix)(name):\n        return payload\n      case UPDATE(prefix)(name):\n        return { ...state, ...payload }\n      case RESET(prefix)(name):\n        return defaultState(defaultData)\n      default:\n        return state\n    }\n  }\n\nexport default key => prefix => name => defaultData => (ctx = {}) => ({\n  ...ctx,\n  state: reducer(key)(prefix)(name)(defaultData)(ctx.state, ctx.action),\n})\n","import { initState } from './simpleObject.middleware'\nimport { getState } from '../../selectors'\n\nexport const get = options => () => state => getState(options)(state)\n\nexport const isInitialized = options => (state) => {\n  if (options.defaultData !== undefined) return getState(options)(state) !== options.defaultData\n  return get(options)()(state) !== initState\n}\n","import * as types from './types'\nimport reducer from './reducer'\n\nconst getWrappedStore = (middlewares = {}) => (options) => {\n  const {\n    key,\n    type = 'keyValue',\n    prefix = '',\n    name,\n    defaultData,\n  } = options\n  const typeConfig = types[type]\n\n  return Object.assign(\n    reducer({ ...middlewares, engine: typeConfig.middlewares })(key)(prefix)(name)(defaultData),\n\n    // type (debug purpose)\n    { krfType: type },\n\n    // actions\n    ...Object.keys(typeConfig.actions).map(k => ({ [k]: typeConfig.actions[k](prefix)(name) })),\n\n    // selectors\n    ...Object.keys(typeConfig.selectors).map(k => ({ [k]: typeConfig.selectors[k](options) })),\n  )\n}\n\n// error :( - not a middleware nor an option parameter\nconst error = () => { throw Error('parameter is not a middleware configuration, nor a factory option object.') }\n\n// params checkers\nconst isMiddleware = params => params.engine || params.pre || params.post\nconst isOptions = params => (!!params.name) || (typeof params === 'string')\n\n// eslint-disable-next-line consistent-return\nconst factory = (forcedOptions = {}) => (params) => {\n  // no param : error\n  if (params === null || params === undefined) error()\n\n  // middleware case\n  if (isMiddleware(params)) {\n    return options => getWrappedStore(params)({ ...options, ...forcedOptions })\n  }\n  // no middleware case\n  if (isOptions(params)) {\n    if (typeof params === 'string') return getWrappedStore()({ name: params, ...forcedOptions })\n    return getWrappedStore()({ ...params, ...forcedOptions })\n  }\n\n  // not a valid param\n  error()\n}\n\nexport const simpleObject = factory({ type: 'simpleObject' })\nexport const keyValue = factory({ type: 'keyValue' })\n\n// default public factory\nexport default factory()\n","export default middlewares => key => prefix => name => defaultData =>\n  (state, { type = 'UNKNOWN', payload } = {}) => {\n    let prevCtx = { state, action: { type, payload } }\n\n    // middlewares to call (in right order)\n    const middlewaresToCall = [\n      // injected by user\n      ...(middlewares.pre || []),\n      // injected by types selection (reducer type)\n      ...(middlewares.engine || []),\n      // injected by user\n      ...(middlewares.post || []),\n    ]\n\n    middlewaresToCall\n      // pass parameters\n      .map(middleware => middleware(key)(prefix)(name)(defaultData))\n      // call middlewares\n      .forEach((middleware) => {\n        prevCtx = middleware(prevCtx)\n      })\n\n    // returns last results to Redux\n    return prevCtx.state\n  }\n"],"names":["scope","action","toUpperCase","getPrefix","prefix","name","SET","set","type","payload","RESET","reset","ADD","UPDATE","update","REMOVE","ADD_OR_UPDATE","key","initState","toObject","entry","object","Array","isArray","forEach","entity","mapDataToState","state","Object","keys","data","values","addOrUpdate","instanceKey","defaultState","defaultData","undefined","reducer","add","omit","concat","remove","keyAlreadyExists","getState","subState","options","path","length","at","getFactory","getKeys","getAsArray","isInitialized","ctx","getData","map","k","propertyPath","filter","includes","d","get","getWrappedStore","middlewares","typeConfig","types","assign","prevCtx","pre","engine","post","middleware","krfType","actions","selectors","error","Error","factory","forcedOptions","params","isMiddleware","isOptions","simpleObject","keyValue"],"mappings":"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"}