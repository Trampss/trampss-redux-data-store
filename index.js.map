{"version":3,"file":"index.js","sources":["src/actions.js","src/types/keyValue/keyValue.middleware.js","src/selectors.js","src/types/simpleObject/simpleObject.middleware.js","src/types/simpleObject/simpleObject.selectors.js","src/reducer.js","src/index.js"],"sourcesContent":["const scope = action => `@@krf/${action.toUpperCase()}`\n\nexport const SET = prefix => scope(`SET_${prefix}`)\nexport const set = prefix => payload => ({ type: SET(prefix), payload })\n\nexport const RESET = prefix => scope(`RESET_${prefix}`)\nexport const reset = prefix => () => ({ type: RESET(prefix) })\n\nexport const ADD = prefix => scope(`ADD_${prefix}`)\nexport const add = prefix => payload => ({ type: ADD(prefix), payload })\n\nexport const UPDATE = prefix => scope(`UPDATE_${prefix}`)\nexport const update = prefix => payload => ({ type: UPDATE(prefix), payload })\n\nexport const REMOVE = prefix => scope(`REMOVE_${prefix}`)\nexport const remove = prefix => key => ({ type: REMOVE(prefix), payload: key })\n\nexport const ADD_OR_UPDATE = prefix => scope(`ADD_OR_UPDATE_${prefix}`)\nexport const addOrUpdate = prefix => payload => ({ type: ADD_OR_UPDATE(prefix), payload })\n\nexport const REPLACE = prefix => scope(`REPLACE_${prefix}`)\nexport const replace = prefix => payload => ({ type: REPLACE(prefix), payload })\n\nexport const ORDER_BY = prefix => scope(`ORDER_BY_${prefix}`)\nexport const orderBy = prefix => payload => ({ type: ORDER_BY(prefix), payload })\n","import { keyBy, without, uniq, omit, orderBy, get, isObjectLike, isString, flatten } from 'lodash'\nimport { SET, ADD, UPDATE, REMOVE, RESET, ADD_OR_UPDATE, REPLACE, ORDER_BY } from './keyValue.actions'\n\nexport const initState = { data: {}, keys: [], array: [], initialized: false }\n\nconst keyAlreadyExists =\n  state => (key, instanceKey) => state.array.find(o => o[key] === instanceKey)\n\nconst set = (key, payload) => ({\n  data: keyBy(payload, key),\n  keys: uniq(payload.map(element => element[key])),\n  array: payload,\n  initialized: true,\n})\n\nconst add = (key, state, payload) => {\n  let array\n  const instanceKey = payload[key]\n  if (!keyAlreadyExists(state)(key, instanceKey)) {\n    array = [...state.array, payload]\n  } else {\n    array = state.array.map(o => (o[key] === instanceKey ? payload : o))\n  }\n\n  return {\n    ...state,\n    data: { ...state.data, [instanceKey]: payload },\n    keys: uniq([...state.keys, instanceKey]),\n    array,\n    initialized: true,\n  }\n}\n\nconst update = (key, state, payload) => {\n  const instanceKey = payload[key]\n\n  return {\n    ...state,\n    data: { ...state.data, [instanceKey]: { ...state.data[instanceKey], ...payload } },\n    array: state.array.map(o => (o[key] === instanceKey ? { ...o, ...payload } : o)),\n  }\n}\n\nconst replace = (key, state, payload) => {\n  const instanceKey = payload[key]\n\n  return {\n    ...state,\n    data: { ...state.data, [instanceKey]: payload },\n    array: state.array.map(o => (o[key] === instanceKey ? payload : o)),\n  }\n}\n\nconst defaultState =\n  (key, defaultData) => (defaultData !== undefined ? set(key, defaultData) : initState)\n\nconst reducer = key => prefix => defaultData =>\n  (state = defaultState(key, defaultData), { type, payload } = {}) => {\n    switch (type) {\n      case SET(prefix): return set(key, payload)\n      case ADD(prefix): return add(key, state, payload)\n      case ADD_OR_UPDATE(prefix): {\n        if (!keyAlreadyExists(state)(key, payload[key])) return add(key, state, payload)\n        return update(key, state, payload)\n      }\n      case UPDATE(prefix): {\n        if (!keyAlreadyExists(state)(key, payload[key])) return state\n        return update(key, state, payload)\n      }\n      case REPLACE(prefix): {\n        if (!keyAlreadyExists(state)(key, payload[key])) return state\n        return replace(key, state, payload)\n      }\n      case ORDER_BY(prefix): {\n        let by = payload\n        let orders = 'asc'\n        if (isObjectLike(payload)) {\n          by = payload.by\n          orders = payload.desc ? 'desc' : 'asc'\n        }\n        const arraySorted = orderBy(\n          state.array,\n          isString(by) ? p => get(p, by) : by,\n          orders,\n        )\n        return {\n          ...state,\n          array: arraySorted,\n          keys: uniq(arraySorted.map(element => element[key])),\n        }\n      }\n      case REMOVE(prefix): {\n        const removeIds = flatten([payload])\n        return {\n          ...state,\n          data: omit(state.data, removeIds),\n          keys: without(state.keys, ...removeIds),\n          array: state.array ? state.array.filter(o => !removeIds.includes(o[key])) : [],\n        }\n      }\n      case RESET(prefix):\n        return defaultState(key, defaultData)\n      default:\n        return state\n    }\n  }\n\nexport default key => prefix => defaultData => (ctx = {}) => ({\n  ...ctx,\n  state: reducer(key)(prefix)(defaultData)(ctx.state, ctx.action),\n})\n","import { at } from 'lodash'\n\nexport const getState = options => (state) => {\n  let subState = state\n  const { name, path } = options\n\n  if (path !== undefined && path.length > 0) subState = at(state, path)[0]\n\n  return subState[name]\n}\n\nconst getFactory = key => options => state => getState(options)(state)[key]\nexport const getKeys = getFactory('keys')\nexport const getAsArray = getFactory('array')\nexport const getLength = options => state => getKeys(options)(state).length\nexport const isInitialized = getFactory('initialized')\n\nconst getData = options => getFactory('data')(options)\nexport const get = options => keys => (state) => {\n  const data = getData(options)(state)\n  // All data\n  if (!keys) return data\n  // By keys\n  if (Array.isArray(keys)) return keys.map(k => data[k])\n  // By key\n  return data[keys]\n}\n\nexport const getBy = options => (propertyPath, values) => (state) => {\n  const data = getAsArray(options)(state)\n  if (Array.isArray(values)) return data.filter(d => values.includes(at(d, propertyPath)[0]))\n  return data.filter(d => values === at(d, propertyPath)[0])\n}\n\nexport const hasKey = options => key => (state) => {\n  const keys = getKeys(options)(state)\n\n  return !!keys.includes(key)\n}\n","import { SET, RESET, UPDATE } from './simpleObject.actions'\n\nexport const initState = {}\nconst defaultState = defaultData => (defaultData !== undefined ? defaultData : initState)\n\nconst reducer = (/* key */) => prefix => defaultData =>\n  (state = defaultState(defaultData), { type, payload } = {}) => {\n    switch (type) {\n      case SET(prefix):\n        return payload\n      case UPDATE(prefix):\n        return { ...state, ...payload }\n      case RESET(prefix):\n        return defaultState(defaultData)\n      default:\n        return state\n    }\n  }\n\nexport default key => prefix => defaultData => (ctx = {}) => ({\n  ...ctx,\n  state: reducer(key)(prefix)(defaultData)(ctx.state, ctx.action),\n})\n","import { initState } from './simpleObject.middleware'\nimport { getState } from '../../selectors'\n\nexport const get = options => () => state => getState(options)(state)\n\nexport const isInitialized = options => (state) => {\n  if (options.defaultData !== undefined) return getState(options)(state) !== options.defaultData\n  return get(options)()(state) !== initState\n}\n","export default middlewares => key => prefix => defaultData =>\n  (state, { type = 'UNKNOWN', payload } = {}) => {\n    let prevCtx = { state, action: { type, payload } }\n\n    // middlewares to call (in right order)\n    const middlewaresToCall = [\n      // injected by user\n      ...(middlewares.pre || []),\n      // injected by types selection (reducer type)\n      ...(middlewares.engine || []),\n      // injected by user\n      ...(middlewares.post || []),\n    ]\n\n    middlewaresToCall\n      // pass parameters\n      .map(middleware => middleware(key)(prefix)(defaultData))\n      // call middlewares\n      .forEach((middleware) => {\n        prevCtx = middleware(prevCtx)\n      })\n\n    // returns last results to Redux\n    return prevCtx.state\n  }\n","import * as types from './types'\nimport reducer from './reducer'\n\nconst getWrappedStore = (middlewares = {}) => (options) => {\n  const { key, type = 'keyValue', prefix = '', name, defaultData } = options\n  const typeConfig = types[type]\n\n  return Object.assign(\n    reducer({ ...middlewares, engine: typeConfig.middlewares })(key)(`${prefix}${name}`)(defaultData),\n\n    // type (debug purpose)\n    { krfType: type },\n\n    // actions\n    ...Object.keys(typeConfig.actions).map(k => ({ [k]: typeConfig.actions[k](`${prefix}${name}`) })),\n\n    // selectors\n    ...Object.keys(typeConfig.selectors).map(k => ({ [k]: typeConfig.selectors[k](options) })),\n  )\n}\n\n// error :( - not a middleware nor an option parameter\nconst error = () => { throw Error('parameter is not a middleware configuration, nor a factory option object.') }\n\n// params checkers\nconst isMiddleware = params => params.engine || params.pre || params.post\nconst isOptions = params => (!!params.name) || (typeof params === 'string')\n\n// eslint-disable-next-line consistent-return\nconst factory = (forcedOptions = {}) => (params) => {\n  // no param : error\n  if (params === null || params === undefined) error()\n\n  // middleware case\n  if (isMiddleware(params)) {\n    return options => getWrappedStore(params)({ ...options, ...forcedOptions })\n  }\n  // no middleware case\n  if (isOptions(params)) {\n    if (typeof params === 'string') return getWrappedStore()({ name: params, ...forcedOptions })\n    return getWrappedStore()({ ...params, ...forcedOptions })\n  }\n\n  // not a valid param\n  error()\n}\n\nexport const simpleObject = factory({ type: 'simpleObject' })\nexport const keyValue = factory({ type: 'keyValue' })\n\n// default public factory\nexport default factory()\n"],"names":["scope","action","toUpperCase","SET","prefix","set","type","payload","RESET","reset","ADD","UPDATE","update","REMOVE","ADD_OR_UPDATE","REPLACE","ORDER_BY","key","initState","data","keys","array","initialized","keyAlreadyExists","instanceKey","state","find","o","keyBy","uniq","map","element","add","replace","defaultState","defaultData","undefined","reducer","by","orders","isObjectLike","desc","arraySorted","orderBy","isString","get","p","removeIds","flatten","omit","without","filter","includes","getState","subState","name","options","path","length","at","getFactory","getKeys","getAsArray","isInitialized","getData","ctx","Array","isArray","k","propertyPath","values","d","prevCtx","middlewares","pre","engine","post","middleware","forEach","getWrappedStore","typeConfig","types","Object","assign","krfType","actions","selectors","error","Error","isMiddleware","params","isOptions","factory","forcedOptions","simpleObject","keyValue"],"mappings":"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"}