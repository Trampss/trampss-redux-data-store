{"version":3,"file":"index.js","sources":["src/actions.js","src/selectors.js","src/middlewares/map.js","src/types/map.js","src/middlewares/uniq.js","src/types/uniq.js","src/reducer.js","src/index.js"],"sourcesContent":["const scope = action => `@trampss/${action.toUpperCase()}`\n\nexport const SET = prefix => scope(`SET_${prefix}`)\nexport const set = prefix => payload => ({ type: SET(prefix), payload })\n\nexport const RESET = prefix => scope(`RESET_${prefix}`)\nexport const reset = prefix => () => ({ type: RESET(prefix) })\n\nexport const ADD = prefix => scope(`ADD_${prefix}`)\nexport const add = prefix => payload => ({ type: ADD(prefix), payload })\n\nexport const UPDATE = prefix => scope(`UPDATE_${prefix}`)\nexport const update = prefix => payload => ({ type: UPDATE(prefix), payload })\n\nexport const REMOVE = prefix => scope(`REMOVE_${prefix}`)\nexport const remove = prefix => key => ({ type: REMOVE(prefix), payload: key })\n","import { at } from 'lodash'\n\nexport const getState = path => prefix => (state) => {\n  let subState = state\n  if (path !== undefined) subState = at(state, path)[0]\n\n  return subState[prefix]\n}\n\nconst getFactory = key => path => prefix => state => getState(path)(prefix)(state)[key]\nexport const getKeys = getFactory('keys')\nexport const getAsArray = getFactory('array')\nexport const getLength = path => prefix => state => getKeys(path)(prefix)(state).length\nexport const isInitialized = getFactory('initialized')\n\nconst getData = getFactory('data')\nexport const get = path => prefix => keys => (state) => {\n  const data = getData(path)(prefix)(state)\n  // All data\n  if (!keys) return data\n  // By keys\n  if (Array.isArray(keys)) return keys.map(k => data[k])\n  // By key\n  return data[keys]\n}\n\nexport const getBy = path => prefix => (propertyPath, values) => (state) => {\n  const data = getAsArray(path)(prefix)(state)\n  if (Array.isArray(values)) return data.filter(d => values.includes(at(d, propertyPath)[0]))\n  return data.filter(d => values === at(d, propertyPath)[0])\n}\n","import { keyBy, without, uniq, omit } from 'lodash'\nimport { SET, ADD, UPDATE, REMOVE, RESET } from '../actions'\n\nexport const initState = { data: {}, keys: [], array: [], initialized: false }\n\nconst keyAlreadyExists =\n  state => (key, instanceKey) => state.array.find(o => o[key] === instanceKey)\n\nconst reducer = key => prefix =>\n  (state = initState, { type, payload } = {}) => {\n    switch (type) {\n      case SET(prefix):\n        return {\n          data: keyBy(payload, key),\n          keys: uniq(payload.map(element => element[key])),\n          array: payload,\n          initialized: true,\n        }\n      case ADD(prefix): {\n        let array\n        const instanceKey = payload[key]\n        if (!keyAlreadyExists(state)(key, instanceKey)) {\n          array = [...state.array, payload]\n        } else {\n          array = state.array.map(o => (o[key] === instanceKey ? payload : o))\n        }\n\n        return {\n          ...state,\n          data: { ...state.data, [instanceKey]: payload },\n          keys: uniq([...state.keys, instanceKey]),\n          array,\n          initialized: true,\n        }\n      }\n      case UPDATE(prefix): {\n        const instanceKey = payload[key]\n        if (!keyAlreadyExists(state)(key, instanceKey)) return state\n        return {\n          ...state,\n          data: { ...state.data, [instanceKey]: { ...state.data[instanceKey], ...payload } },\n          array: state.array.map(o => (o[key] === instanceKey ? { ...o, ...payload } : o)),\n        }\n      }\n      case REMOVE(prefix):\n        return {\n          ...state,\n          data: omit(state.data, [payload]),\n          keys: without(state.keys, payload),\n          array: state.array ? state.array.filter(o => o[key] !== payload) : [],\n        }\n      case RESET(prefix):\n        return initState\n      default:\n        return state\n    }\n  }\n\nexport default key => prefix => (ctx = {}) => ({\n  ...ctx,\n  state: reducer(key)(prefix)(ctx.state, ctx.action),\n})\n","import map from '../middlewares/map'\n\nexport default {\n  middlewares: [map],\n  actions: ['set', 'add', 'reset', 'remove'],\n  selectors: ['getState', 'getKeys', 'getAsArray', 'getLength', 'isInitialized', 'get', 'getBy'],\n}\n","import { SET, RESET } from '../actions'\n\nexport const initState = { data: undefined, initialized: false }\n\nconst reducer = (/* key */) => prefix =>\n  (state = initState, { type, payload } = {}) => {\n    switch (type) {\n      case SET(prefix):\n        return {\n          data: payload,\n          initialized: true,\n        }\n      case RESET(prefix):\n        return initState\n      default:\n        return state\n    }\n  }\n\nexport default key => prefix => (ctx = {}) => ({\n  ...ctx,\n  state: reducer(key)(prefix)(ctx.state, ctx.action),\n})\n","import uniq from '../middlewares/uniq'\n\nexport default {\n  middlewares: [uniq],\n  actions: ['set', 'reset'],\n  selectors: ['getState', 'isInitialized', 'get'],\n}\n","export default middlewares => key => prefix =>\n  (state, { type = 'UNKNOWN', payload } = {}) => {\n    let prevCtx = { state, action: { type, payload } }\n\n    // middlewares to call (in right order)\n    const middlewaresToCall = [\n      // injected by user\n      ...(middlewares.pre || []),\n      // injected by types selection (reducer type)\n      ...(middlewares.engine || []),\n      // injected by user\n      ...(middlewares.post || []),\n    ]\n\n    middlewaresToCall\n      // pass parameters\n      .map(middleware => middleware(key)(prefix))\n      // call middlewares\n      .forEach((middleware) => {\n        prevCtx = middleware(prevCtx)\n      })\n\n    // returns last results to Redux\n    return prevCtx.state\n  }\n","import * as actions from './actions'\nimport * as selectors from './selectors'\nimport * as types from './types'\nimport reducer from './reducer'\n\nconst func = (middlewares = {}) => key => path => type => prefix => name => Object.assign(\n  reducer({ ...middlewares, engine: type.middlewares })(key)(`${prefix}${name}`),\n\n  // actions\n  ...Object.keys(actions)\n    .filter(k => type.actions.includes(k))\n    .map(k => ({ [k]: actions[k](`${prefix}${name}`) })),\n\n  // selectors\n  ...Object.keys(selectors)\n    .filter(k => type.selectors.includes(k))\n    .map(k => ({ [k]: selectors[k](path)(name) })),\n)\n\n\nexport default middlewares => key => path => (options) => {\n  let name\n  let prefix = ''\n  let type = 'map'\n\n  // retrieve options\n  if (typeof options === 'string') name = options\n  else {\n    name = options.name\n    prefix = options.prefix || ''\n    type = options.type || 'map'\n  }\n\n  return func(middlewares)(key)(path)(types[type])(prefix)(name)\n}\n"],"names":["scope","action","toUpperCase","SET","prefix","RESET","ADD","UPDATE","REMOVE","type","payload","key","getState","state","subState","undefined","path","_at","getFactory","getKeys","getAsArray","isInitialized","getData","length","data","keys","Array","isArray","map","k","propertyPath","values","filter","includes","d","initState","array","initialized","keyAlreadyExists","instanceKey","find","o","reducer","_keyBy","_uniq","element","_omit","_without","ctx","prevCtx","middlewares","pre","engine","post","middleware","forEach","func","Object","assign","name","actions","selectors","options","types"],"mappings":"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"}