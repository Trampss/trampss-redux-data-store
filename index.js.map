{"version":3,"file":"index.js","sources":["src/actions.js","src/selectors.js","src/middlewares/core.js","src/reducer.js","src/index.js"],"sourcesContent":["const scope = action => `@trampss/${action.toUpperCase()}`\n\nexport const SET = prefix => scope(`SET_${prefix}`)\nexport const set = prefix => payload => ({ type: SET(prefix), payload })\n\nexport const RESET = prefix => scope(`RESET_${prefix}`)\nexport const reset = prefix => () => ({ type: RESET(prefix) })\n\nexport const ADD = prefix => scope(`ADD_${prefix}`)\nexport const add = prefix => payload => ({ type: ADD(prefix), payload })\n\nexport const REMOVE = prefix => scope(`REMOVE_${prefix}`)\nexport const remove = prefix => key => ({ type: REMOVE(prefix), payload: key })\n","import { at } from 'lodash'\n\nexport const getState = path => prefix => (state) => {\n  let subState = state\n  if (path !== undefined) subState = at(state, path)[0]\n\n  return subState[prefix]\n}\n\nconst getFactory = key => path => prefix => state => getState(path)(prefix)(state)[key]\nexport const getKeys = getFactory('keys')\nexport const getAsArray = getFactory('array')\nexport const getLength = path => prefix => state => getKeys(path)(prefix)(state).length\nexport const isInitialized = getFactory('initialized')\n\nconst getData = getFactory('data')\nexport const get = path => prefix => keys => (state) => {\n  const data = getData(path)(prefix)(state)\n  // All data\n  if (!keys) return data\n  // By keys\n  if (Array.isArray(keys)) return keys.map(k => data[k])\n  // By key\n  return data[keys]\n}\n\nexport const getBy = path => prefix => (propertyPath, values) => (state) => {\n  const data = getAsArray(path)(prefix)(state)\n  if (Array.isArray(values)) return data.filter(d => values.includes(at(d, propertyPath)[0]))\n  return data.filter(d => values === at(d, propertyPath)[0])\n}\n","import { keyBy, without, uniq, omit } from 'lodash'\nimport { SET, ADD, REMOVE, RESET } from '../actions'\nimport { initState } from '../reducer'\n\nconst coreReducer = key => prefix =>\n  (state = initState, { type, payload } = {}) => {\n    switch (type) {\n      case SET(prefix):\n        return {\n          data: keyBy(payload, key),\n          keys: uniq(payload.map(element => element[key])),\n          array: payload,\n          initialized: true,\n        }\n      case ADD(prefix): {\n        const sameKey = state.array.find(o => o[key] === payload[key])\n        let array\n        if (sameKey === undefined) {\n          array = [...state.array, payload]\n        } else {\n          array = state.array.map(\n            o => (o[key] === payload[key] ? payload : o),\n          )\n        }\n\n        return {\n          ...state,\n          data: { ...state.data, [payload[key]]: payload },\n          keys: uniq([...state.keys, payload[key]]),\n          array,\n          initialized: true,\n        }\n      }\n      case REMOVE(prefix):\n        return {\n          ...state,\n          data: omit(state.data, [payload]),\n          keys: without(state.keys, payload),\n          array: state.array ? state.array.filter(o => o[key] !== payload) : [],\n        }\n      case RESET(prefix):\n        return initState\n      default:\n        return state\n    }\n  }\n\nexport default key => prefix => (ctx = {}) => ({\n  ...ctx,\n  state: coreReducer(key)(prefix)(ctx.state, ctx.action),\n})\n","import { core } from './middlewares'\n\nexport const initState = { data: {}, keys: [], array: [], initialized: false }\n\nexport default (middlewares = {}) => key => prefix =>\n  (state = initState, { type = 'UNKNOWN', payload } = {}) => {\n    let prevCtx = { state, action: { type, payload } }\n\n    // middlewares to call (in right order)\n    const middlewaresToCall = [\n      ...(middlewares.pre || []),\n      core,\n      ...(middlewares.post || []),\n    ]\n\n    middlewaresToCall\n      // pass parameters\n      .map(middleware => middleware(key)(prefix))\n      // call middlewares\n      .forEach((middleware) => {\n        prevCtx = middleware(prevCtx)\n      })\n\n    // returns last results to Redux\n    return prevCtx.state\n  }\n","import * as actions from './actions'\nimport * as selectors from './selectors'\nimport reducer from './reducer'\n\nconst func = middlewares => key => path => prefix => Object.assign(\n  reducer(middlewares)(key)(prefix),\n  ...Object.keys(actions).map(k => ({ [k]: actions[k](prefix) })),\n  ...Object.keys(selectors).map(k => ({ [k]: selectors[k](path)(prefix) })),\n)\n\nexport default (...args) => {\n  const length = args.length\n  const [middlewares, key, path, prefix] = args\n\n  if (length < 2) return func(middlewares)\n  if (length === 2) return func(middlewares)(key)\n  if (length === 3) return func(middlewares)(key)(path)\n  return func(middlewares)(key)(path)(prefix)\n}\n"],"names":["scope","action","toUpperCase","SET","prefix","RESET","ADD","REMOVE","type","payload","key","getState","state","subState","undefined","path","_at","getFactory","getKeys","getAsArray","isInitialized","getData","length","data","keys","Array","isArray","map","k","propertyPath","values","filter","includes","d","coreReducer","initState","_keyBy","_uniq","element","array","find","o","_omit","_without","ctx","initialized","middlewares","prevCtx","pre","core","post","middleware","forEach","func","Object","assign","reducer","actions","selectors","args"],"mappings":"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"}