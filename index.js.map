{"version":3,"file":"index.js","sources":["src/actions.js","src/types/keyValue/keyValue.middleware.js","src/selectors.js","src/types/simpleObject/simpleObject.middleware.js","src/types/simpleObject/simpleObject.selectors.js","src/index.js","src/reducer.js"],"sourcesContent":["const scope = action => `@@krf/${action.toUpperCase()}`\n\nconst getPrefix = prefix => name => `${prefix ? '>' : ''}${prefix}>${name}`\n\nexport const SET = prefix => name => scope(`SET${getPrefix(prefix)(name)}`)\nexport const set = prefix => name => payload => ({ type: SET(prefix)(name), payload })\n\nexport const RESET = prefix => name => scope(`RESET${getPrefix(prefix)(name)}`)\nexport const reset = prefix => name => () => ({ type: RESET(prefix)(name) })\n\nexport const ADD = prefix => name => scope(`ADD${getPrefix(prefix)(name)}`)\nexport const add = prefix => name => payload => ({ type: ADD(prefix)(name), payload })\n\nexport const UPDATE = prefix => name => scope(`UPDATE${getPrefix(prefix)(name)}`)\nexport const update = prefix => name => payload => ({ type: UPDATE(prefix)(name), payload })\n\nexport const REMOVE = prefix => name => scope(`REMOVE${getPrefix(prefix)(name)}`)\nexport const remove = prefix => name => key => ({ type: REMOVE(prefix)(name), payload: key })\n\nexport const ADD_OR_UPDATE = prefix => name => scope(`ADD_OR_UPDATE${getPrefix(prefix)(name)}`)\nexport const addOrUpdate = prefix => name => payload => ({ type: ADD_OR_UPDATE(prefix)(name), payload })\n\nexport const REPLACE = prefix => name => scope(`REPLACE${getPrefix(prefix)(name)}`)\nexport const replace = prefix => name => payload => ({ type: REPLACE(prefix)(name), payload })\n\nexport const ORDER_BY = prefix => name => scope(`ORDER_BY${getPrefix(prefix)(name)}`)\nexport const orderBy = prefix => name => payload => ({ type: ORDER_BY(prefix)(name), payload })\n","import { omit, orderBy, get } from 'lodash'\nimport { SET, ADD, UPDATE, REMOVE, RESET, ADD_OR_UPDATE, REPLACE, ORDER_BY } from './keyValue.actions'\n\nexport const initState = {\n  data: {},\n  keys: [],\n  array: [],\n  initialized: false,\n}\n\nconst getAsArray = entry => (Array.isArray(entry) ? entry : [entry])\n\nconst toObject = (key, entry) => {\n  const object = {}\n  getAsArray(entry).forEach((entity) => { object[entity[key]] = entity })\n\n  return object\n}\n\nconst keyAlreadyExists = state => key => (state.data[key] !== undefined)\n\nconst mapDataToState = state => data => ({\n  ...state,\n  data,\n  keys: Object.keys(data),\n  array: Object.values(data),\n  initialized: true,\n})\n\nconst set = (key, state, payload) => mapDataToState(state)(toObject(key, payload))\n\nconst add = (key, state, payload) => {\n  const instanceKey = payload[key]\n\n  return mapDataToState(state)({ ...state.data, [instanceKey]: payload })\n}\n\nconst addOrUpdate = (key, state, payload) => {\n  const instanceKey = payload[key]\n\n  return mapDataToState(state)({ ...state.data, [instanceKey]: { ...state.data[instanceKey], ...payload } })\n}\n\nconst remove = (key, state, payload) => mapDataToState(state)(omit(state.data, [].concat(payload)))\n\nconst defaultState = (key, defaultData) => (defaultData !== undefined ? set(key, {}, defaultData) : initState)\n\nconst reducer = key => prefix => name => defaultData =>\n  (state = defaultState(key, defaultData), { type, payload } = {}) => {\n    switch (type) {\n      // simple\n      case SET(prefix)(name): return set(key, state, payload)\n      case ADD(prefix)(name): return add(key, state, payload)\n      case ADD_OR_UPDATE(prefix)(name): return addOrUpdate(key, state, payload)\n      case REMOVE(prefix)(name): return remove(key, state, payload)\n      case RESET(prefix)(name): return defaultState(key, defaultData)\n\n      // with key existance test\n      case UPDATE(prefix)(name): return keyAlreadyExists(state)(payload[key]) ? addOrUpdate(key, state, payload) : state\n      case REPLACE(prefix)(name): return keyAlreadyExists(state)(payload[key]) ? add(key, state, payload) : state\n\n      // heavy\n      case ORDER_BY(prefix)(name): {\n        let by = payload\n        let orders = 'asc'\n        if (typeof payload === 'object' && payload.by) {\n          by = payload.by // eslint-disable-line prefer-destructuring\n          orders = payload.desc ? 'desc' : 'asc'\n        }\n\n        const arraySorted = orderBy(\n          state.array,\n          typeof by === 'string' ? p => get(p, by) : by,\n          orders,\n        )\n\n        return {\n          ...state,\n          array: arraySorted,\n          keys: arraySorted.map(element => element[key]),\n        }\n      }\n      default: return state\n    }\n  }\n\nexport default key => prefix => name => defaultData => (ctx = {}) => ({\n  ...ctx,\n  state: reducer(key)(prefix)(name)(defaultData)(ctx.state, ctx.action),\n})\n","import { at } from 'lodash'\n\nexport const getState = options => (state) => {\n  let subState = state\n  const { name, path } = options\n\n  if (path !== undefined && path.length > 0) [subState] = at(state, path)\n\n  return subState[name]\n}\n\nconst getFactory = key => options => state => getState(options)(state)[key]\nexport const getKeys = getFactory('keys')\nexport const getAsArray = getFactory('array')\nexport const getLength = options => state => getKeys(options)(state).length\nexport const isInitialized = getFactory('initialized')\n\nconst getData = options => getFactory('data')(options)\nexport const get = options => keys => (state) => {\n  const data = getData(options)(state)\n  // All data\n  if (keys === undefined || keys === null) return data\n  // By keys\n  if (Array.isArray(keys)) return keys.map(k => data[k])\n  // By key\n  return data[keys]\n}\n\nexport const getBy = options => (propertyPath, values) => (state) => {\n  const data = getAsArray(options)(state)\n  if (Array.isArray(values)) return data.filter(d => values.includes(at(d, propertyPath)[0]))\n  return data.filter(d => values === at(d, propertyPath)[0])\n}\n\nexport const hasKey = options => key => (state) => {\n  const keys = getKeys(options)(state)\n\n  return keys.includes(key)\n}\n","import { SET, RESET, UPDATE } from './simpleObject.actions'\n\nexport const initState = {}\nconst defaultState = defaultData => (defaultData !== undefined ? defaultData : initState)\n\nconst reducer = (/* key */) => prefix => name => defaultData =>\n  (state = defaultState(defaultData), { type, payload } = {}) => {\n    switch (type) {\n      case SET(prefix)(name):\n        return payload\n      case UPDATE(prefix)(name):\n        return { ...state, ...payload }\n      case RESET(prefix)(name):\n        return defaultState(defaultData)\n      default:\n        return state\n    }\n  }\n\nexport default key => prefix => name => defaultData => (ctx = {}) => ({\n  ...ctx,\n  state: reducer(key)(prefix)(name)(defaultData)(ctx.state, ctx.action),\n})\n","import { initState } from './simpleObject.middleware'\nimport { getState } from '../../selectors'\n\nexport const get = options => () => state => getState(options)(state)\n\nexport const isInitialized = options => (state) => {\n  if (options.defaultData !== undefined) return getState(options)(state) !== options.defaultData\n  return get(options)()(state) !== initState\n}\n","import * as types from './types'\nimport reducer from './reducer'\n\nconst defaultOptions = {\n  key: 'id',\n  type: 'keyValue',\n  prefix: '',\n}\n\nconst getWrappedStore = (middlewares = {}) => (options = {}) => {\n  const innerOptions = { ...defaultOptions, ...options }\n  const {\n    key,\n    type,\n    prefix,\n    name,\n    defaultData,\n  } = innerOptions\n\n  const typeConfig = types[type]\n\n  return Object.assign(\n    reducer({ ...middlewares, engine: typeConfig.middlewares })(key)(prefix)(name)(defaultData),\n\n    // type (debug purpose)\n    { krfType: type },\n\n    // actions\n    ...Object.keys(typeConfig.actions).map(k => ({ [k]: typeConfig.actions[k](prefix)(name) })),\n\n    // selectors\n    ...Object.keys(typeConfig.selectors).map(k => ({ [k]: typeConfig.selectors[k](innerOptions) })),\n  )\n}\n\n// error :( - not a middleware nor an option parameter\nconst error = () => { throw Error('parameter is not a middleware configuration, nor a factory option object.') }\n\n// params checkers\nconst isMiddleware = params => params.engine || params.pre || params.post\nconst isOptions = params => (!!params.name) || (typeof params === 'string')\n\n// eslint-disable-next-line consistent-return\nconst factory = (forcedOptions = {}) => (params) => {\n  // no param : error\n  if (params === null || params === undefined) error()\n\n  // middleware case\n  if (isMiddleware(params)) {\n    return options => getWrappedStore(params)({ ...options, ...forcedOptions })\n  }\n  // no middleware case\n  if (isOptions(params)) {\n    if (typeof params === 'string') return getWrappedStore()({ name: params, ...forcedOptions })\n    return getWrappedStore()({ ...params, ...forcedOptions })\n  }\n\n  // not a valid param\n  error()\n}\n\nexport const simpleObject = factory({ type: 'simpleObject' })\nexport const keyValue = factory({ type: 'keyValue' })\n\n// default public factory\nexport default factory()\n","export default middlewares => key => prefix => name => defaultData =>\n  (state, { type = 'UNKNOWN', payload } = {}) => {\n    let prevCtx = { state, action: { type, payload } }\n\n    // middlewares to call (in right order)\n    const middlewaresToCall = [\n      // injected by user\n      ...(middlewares.pre || []),\n      // injected by types selection (reducer type)\n      ...(middlewares.engine || []),\n      // injected by user\n      ...(middlewares.post || []),\n    ]\n\n    middlewaresToCall\n      // pass parameters\n      .map(middleware => middleware(key)(prefix)(name)(defaultData))\n      // call middlewares\n      .forEach((middleware) => {\n        prevCtx = middleware(prevCtx)\n      })\n\n    // returns last results to Redux\n    return prevCtx.state\n  }\n"],"names":["scope","action","toUpperCase","getPrefix","prefix","name","SET","set","type","payload","RESET","reset","ADD","UPDATE","update","REMOVE","ADD_OR_UPDATE","REPLACE","ORDER_BY","key","initState","toObject","entry","object","Array","isArray","forEach","entity","keyAlreadyExists","undefined","state","data","mapDataToState","Object","keys","values","add","instanceKey","addOrUpdate","defaultState","defaultData","reducer","omit","concat","remove","by","orders","desc","arraySorted","orderBy","array","get","p","map","element","getState","subState","options","path","length","at","getFactory","getKeys","getAsArray","isInitialized","ctx","getData","k","propertyPath","filter","includes","d","defaultOptions","getWrappedStore","middlewares","innerOptions","typeConfig","types","assign","prevCtx","pre","engine","post","middleware","krfType","actions","selectors","error","Error","factory","forcedOptions","params","isMiddleware","isOptions","simpleObject","keyValue"],"mappings":"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"}